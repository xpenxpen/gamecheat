package org.xpen.gujian1;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.StopWatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xpen.util.UserSetting;

public class BikDecryptor {
    
    private static final Logger LOG = LoggerFactory.getLogger(BikDecryptor.class);
    private static final int[] MASTERKEY = {
    		0x8, 0xF3, 0x89, 0xE6, 0x57, 0x2B, 0xA9, 0xCC, 0xCC, 0xE5, 0xEA, 0xD2, 0xD2, 0xD2, 0x44, 0x82,
    		0xDC, 0x42, 0x6, 0xD5, 0x54, 0xE5, 0xB, 0x86, 0x23, 0xBB, 0x15, 0xE7, 0xDF, 0xF4, 0x4C, 0xC4,
    		0x7B, 0x91, 0xD2, 0xC6, 0xC5, 0xF0, 0x22, 0x0, 0x48, 0xA7, 0x6F, 0xD9, 0x88, 0x0, 0x0, 0x0,
    		0x7B, 0x91, 0xD2, 0xC6, 0xC5, 0xF0, 0x22, 0x12, 0x15, 0x37, 0xDD, 0x10, 0x8E, 0x58, 0x74, 0x22,
    		0x9A, 0x8, 0x4E, 0xFF, 0x93, 0x32, 0xC5, 0x16, 0x99, 0x14, 0x34, 0xE8, 0xA6, 0xA2, 0xA4, 0x4E,
    		0xE3, 0x41, 0x14, 0xCA, 0x1B, 0x3F, 0xA8, 0xDE, 0xBE, 0xE6, 0x33, 0xCB, 0x78, 0x75, 0x2D, 0xF0,
    		0xBF, 0x7D, 0xD5, 0x29, 0xA7, 0x3E, 0xE0, 0x90, 0xD3, 0x41, 0x46, 0x51, 0x7D, 0x9D, 0x31, 0x80,
    		0xC2, 0x60, 0x56, 0xC0, 0xB9, 0x27, 0x65, 0x80, 0x1B, 0x5E, 0x7E, 0xFD, 0x3D, 0x4B, 0xD6, 0x0,
    		0x1B, 0x5E, 0x7E, 0xFD, 0x3D, 0x4B, 0xD0, 0x82, 0x67, 0xB5, 0x91, 0xDF, 0x50, 0xF9, 0xF4, 0xD7,
    		0xA1, 0x7, 0x5C, 0xCF, 0x88, 0x48, 0x2B, 0xB1, 0x15, 0x37, 0xDD, 0x10, 0x8E, 0x58, 0x74, 0x22,
    		0xDC, 0x42, 0x6, 0xD5, 0x54, 0xE5, 0xB, 0x86, 0x23, 0xBB, 0x91, 0xD2, 0xC6, 0xC5, 0xF0, 0xCC,
    		0x93, 0x32, 0xC5, 0x16, 0x48, 0x2B, 0xB1, 0x15, 0xCE, 0xF3, 0x89, 0xE6, 0x57, 0x2B, 0xA9, 0xCC,
    		0x23, 0x71, 0x96, 0xE4, 0x73, 0x2B, 0xC4, 0xCC, 0xCC, 0xE5, 0x67, 0xD2, 0xD2, 0xD2, 0x44, 0x82,
    		0xE3, 0xA7, 0x78, 0xAA, 0x40, 0xF1, 0x58, 0x0, 0xA1, 0x7F, 0xB8, 0x4, 0x26, 0x90, 0x0, 0xB,
    		0x25, 0x48, 0xD7, 0x1C, 0x5F, 0x47, 0x3F, 0x1A, 0x29, 0xC0, 0x7, 0x66, 0x27, 0x85, 0x79, 0x14,
    		0xF2, 0xE8, 0xE9, 0x85, 0x3A, 0x54, 0x2E, 0x93, 0x52, 0xB5, 0x29, 0x6A, 0x56, 0xB4, 0x54, 0xA7
    	};    
    private RandomAccessFile raf;
    private FileChannel fileChannel;
    private File file;

	public static void main(String[] args) throws Exception {
        UserSetting.rootInputFolder = "F:/game/gjqt1/run/Data/Video";
        UserSetting.rootOutputFolder = "F:/game/gjqt1/myex/Video";
        
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        
        File folder = new File(UserSetting.rootInputFolder);
        File[] listFiles = folder.listFiles();
        
        for (File file: listFiles) {
        	LOG.debug("---------Starting {}", file.getName());
            
        	BikDecryptor bikDecryptor = new BikDecryptor(file);
        	bikDecryptor.decode();
        	bikDecryptor.close();
        }
        
        stopWatch.stop();
        System.out.println("-----ALL OK, cost time = "+stopWatch.getTime(TimeUnit.SECONDS)+ "s");

    }

    public BikDecryptor(File file) throws Exception {
    	this.file = file;
    	raf = new RandomAccessFile(file, "r");
    	fileChannel = raf.getChannel();
	}

	private void decode() throws Exception {
		String simpleName = file.getName();
		String nameKey = simpleName.substring(0, simpleName.indexOf('.')).toUpperCase(Locale.ENGLISH);
		LOG.debug("nameKey={}", nameKey);
        
        ByteBuffer buffer = ByteBuffer.allocate(1);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.limit(1);
        fileChannel.read(buffer);
        buffer.flip();
        
		int fileKeyLen = buffer.get() & 0xFF;
		LOG.debug("fileKeyLen={}", fileKeyLen);
		
		//decrypt FileKey using NameKey
        byte[] fileKey = new byte[fileKeyLen];
        raf.seek(0);
        raf.readFully(fileKey);
        
        for (int i = 0; i < fileKeyLen; i++) {
        	fileKey[i] ^= (nameKey.charAt(i % nameKey.length()) & 0xFF);
        }
		LOG.debug("fileKey={}", fileKey);
        
        int offset = (fileKey[0x25] & 0xFF) % fileKeyLen;
        
        File outFile = new File(UserSetting.rootOutputFolder, simpleName);
        File parentFile = outFile.getParentFile();
        parentFile.mkdirs();
        
        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(outFile));
        int buffCount = 1024 * 16;
        long remaining = raf.length() - raf.getFilePointer();
        while (remaining > 0) {
        	int toReadCount = buffCount;
    		if (remaining < buffCount) {
    			toReadCount = (int)remaining;
    		}
    		
    		byte[] buff = new byte[toReadCount];
    		raf.readFully(buff);
    		
    		for (int i = 0; i < toReadCount; i++) {
    			buff[i] ^= fileKey[offset];
    			buff[i] ^= MASTERKEY[offset];
    			offset = (offset + 1) % fileKeyLen;
    		}
    		os.write(buff);
    		remaining = raf.length() - raf.getFilePointer();
    		
        }
        os.close();
    }

	private void close() throws Exception {
        fileChannel.close();
        raf.close();
	}

}
